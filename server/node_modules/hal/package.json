{
  "_args": [
    [
      "hal",
      "/Users/jonathan/Projects/httphound"
    ]
  ],
  "_from": "hal@*",
  "_id": "hal@0.1.0",
  "_inCache": true,
  "_installable": true,
  "_location": "/hal",
  "_npmUser": {
    "email": "naholyr@gmail.com",
    "name": "naholyr"
  },
  "_npmVersion": "1.2.0",
  "_phantomChildren": {},
  "_requested": {
    "name": "hal",
    "raw": "hal",
    "rawSpec": "",
    "scope": null,
    "spec": "*",
    "type": "range"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/hal/-/hal-0.1.0.tgz",
  "_shasum": "70f15eb0f9b5ef19cdfb58189ac2c457e370e15b",
  "_shrinkwrap": null,
  "_spec": "hal",
  "_where": "/Users/jonathan/Projects/httphound",
  "author": {
    "email": "naholyr@gmail.com",
    "name": "Nicolas Chambrier",
    "url": "http://naholyr.fr"
  },
  "bugs": {
    "url": "https://github.com/naholyr/js-hal/issues"
  },
  "dependencies": {},
  "description": "Hypertext Application Language",
  "devDependencies": {
    "chai": "*",
    "mocha": "*"
  },
  "directories": {},
  "dist": {
    "shasum": "70f15eb0f9b5ef19cdfb58189ac2c457e370e15b",
    "tarball": "https://registry.npmjs.org/hal/-/hal-0.1.0.tgz"
  },
  "engines": {
    "node": "*"
  },
  "homepage": "https://github.com/naholyr/js-hal#readme",
  "main": "hal.js",
  "maintainers": [
    {
      "name": "naholyr",
      "email": "naholyr@gmail.com"
    }
  ],
  "name": "hal",
  "optionalDependencies": {},
  "readme": "# JS HAL [![Travis CI Status](https://travis-ci.org/lmtm/js-hal.png \"You Shall Pass!\")](https://travis-ci.org/#!/lmtm/js-hal)\n\n[HAL](http://stateless.co/hal_specification.html) is a hypermedia-aware serialization format, which can be represented using JSON and XML format.\n\nIt's obviously particularly useful for RESTful API delivering real Hypermedia contents (cf HATEOAS).\n\n## Usage\n\n### In your browser\n\n```html\n<script src=\"/path/to/hal.js\"></script>\n<script>\nvar resource = new hal.Resource({name: \"Harry\"}, '/harry');\nresource.link('hello', '/harry/hello');\nconsole.log(resource.toJSON());\n</script>\n```\n\n#### Compatibility\n\nDon't know, didn't test. It may not even work on the browser, who knows ?\n\nOK, more seriously you'll require:\n* `JSON.stringify`\n* `Array.prototype.forEach`\n* `Array.prototype.reduce`\n* `Object.prototype.hasOwnProperty`\n\n### In Node.JS\n\n```sh\nnpm install hal\n```\n\n```javascript\nvar hal = require('hal');\n\nvar resource = new hal.Resource({name: \"Harry\"}, '/harry');\nresource.link('hello', '/harry/hello');\nconsole.log(resource.toJSON());\n```\n\n## API\n\n### `Resource (object, uri)`\n\nThis class designs a HAL resource:\n\n* `object` are the base fields of this resource\n * Note that you can define `_links` and `_embedded` properties, this is at your own risks\n * If you set `href` property and `uri` is undefined, it will be used instead of `uri` and deleted\n* `uri` is the link to this property (as `<link rel=\"self\">`)\n\n### `Link (rel, href)` or `Link (rel, attributes)`\n\nThis class designs a HAL link:\n\n* `rel` is mandatory\n* `href` or `attributes.href` is mandatory\n\n### `Resource#link (link)` or `Resource#link (rel, href)` or `Resource#link (rel, attributes)`\n\nAdds a new link to resource.\n\n### `Resource#embed (rel, resource[s] [, pluralize])`\n\nEmbeds other resource(s) to current resource.\n\n### `Resource#toXML ()`\n\nReturns XML representation.\n\nNote: embedded resources `rel` will be naively singularized by removing last 's'. See `Resource#toJSON` for more information.\n\n### `Resource#toJSON ()`\n\nReturns JSON representation.\n\nNote: `rel` will be naively pluralized by appending a 's' if there is not. This is due to differences between JSON and XML representation on embedded relationship and `rel` attribute.\n\n#### Why this crappy singular/plural management ?\n\nI base myself on [the examples provided here](http://stateless.co/hal_specification.html#examples). The two representations are equivalent, and you can see how plural and singular is used:\n\n```javascript\n{\n  \"_links\": {\n   \"self\": { \"href\": \"/orders\" }\n  },\n  \"_embedded\": {\n   \"orders\": [{\n       \"_links\": {\n         \"self\": { \"href\": \"/orders/1\" }\n       }\n     },{\n       \"_links\": {\n         \"self\": { \"href\": \"/orders/2\" }\n       }\n    }]\n  }\n}\n```\n\n```xml\n<resource href=\"/orders\">\n  <resource rel=\"order\" href=\"/orders/1\">\n  </resource>\n  <resource rel=\"order\" href=\"/orders/2\">\n  </resource>\n</resource>\n```\n\nIf this ugly action is the result of a misunderstanding, please let me know as I'd be glad to remove it!\n\n## Example\n\n```javascript\n// A resource\nvar ordersCollection = new hal.Resource({\n  currentlyProcessing: 14,\n  shippedToday: 20\n}, \"/orders\");\n\n// Links\nordersCollection.link(\"next\", \"/orders?page=2\");\nordersCollection.link(\"find\", {href: \"/orders{?id}\", templated: true});\n\n// Another resource\nvar order123 = new hal.Resource({\n  total: 30.00,\n  currency: \"USD\",\n  status: \"shipped\"\n}, \"/orders/123\");\n// Alternative ways to link\norder123.link(new hal.Link(\"basket\", \"/baskets/98712\"));\norder123.link(new hal.Link(\"customer\", {href: \"/customers/7809\"}));\n\n// Yet another resource\nvar order124 = new hal.Resource({\n  total: 20.00,\n  currency: \"USD\",\n  status: \"processing\"\n}, \"/orders/124\");\norder124.link(\"basket\", \"/baskets/97213\");\norder124.link(\"customer\", \"/customers/12369\");\n\n// Embed the resources\nordersCollection.embed(\"orders\", [order123, order124]);\n```\n\nCalling `ordersCollection.toJSON('  ')`:\n\n```javascript\n{\n  \"currentlyProcessing\": 14,\n  \"shippedToday\": 20,\n  \"_links\": {\n    \"self\": {\n      \"href\": \"/orders\"\n    },\n    \"next\": {\n      \"href\": \"/orders?page=2\"\n    },\n    \"find\": {\n      \"href\": \"/orders{?id}\",\n      \"templated\": \"true\"\n    }\n  },\n  \"_embedded\": {\n    \"orders\": [\n      {\n        \"total\": 30,\n        \"currency\": \"USD\",\n        \"status\": \"shipped\",\n        \"_links\": {\n          \"self\": {\n            \"href\": \"/orders/123\"\n          },\n          \"basket\": {\n            \"href\": \"/baskets/98712\"\n          },\n          \"customer\": {\n            \"href\": \"/customers/7809\"\n          }\n        }\n      },\n      {\n        \"total\": 20,\n        \"currency\": \"USD\",\n        \"status\": \"processing\",\n        \"_links\": {\n          \"self\": {\n            \"href\": \"/orders/124\"\n          },\n          \"basket\": {\n            \"href\": \"/baskets/97213\"\n          },\n          \"customer\": {\n            \"href\": \"/customers/12369\"\n          }\n        }\n      }\n    ]\n  }\n}\n```\n\nCalling `ordersCollection.toXML('  ')`:\n\n```xml\n<resource href=\"/orders\">\n  <link rel=\"next\" href=\"/orders?page=2\" />\n  <link rel=\"find\" href=\"/orders{?id}\" templated=\"true\" />\n  <currentlyProcessing>14</currentlyProcessing>\n  <shippedToday>20</shippedToday>\n  <resource rel=\"order\" href=\"/orders/123\">\n      <link rel=\"basket\" href=\"/baskets/98712\" />\n      <link rel=\"customer\" href=\"/customers/7809\" />\n      <total>30</total>\n      <currency>USD</currency>\n      <status>shipped</status>\n  </resource>\n  <resource rel=\"order\" href=\"/orders/124\">\n      <link rel=\"basket\" href=\"/baskets/97213\" />\n      <link rel=\"customer\" href=\"/customers/12369\" />\n      <total>20</total>\n      <currency>USD</currency>\n      <status>processing</status>\n  </resource>\n</resource>\n```\n\nYes, JSON seems a lot more verbose, but it's because of the spaces. In production you won't add indentation and then JSON is 517 bytes long, versus 625 bytes of XML.\n\nNot yet, XML, not yet.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/naholyr/js-hal.git"
  },
  "scripts": {
    "test": "./node_modules/.bin/_mocha -R list -u bdd"
  },
  "version": "0.1.0"
}
